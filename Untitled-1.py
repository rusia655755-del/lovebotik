import os
import sys
import subprocess
import sqlite3
import asyncio
import random
from datetime import datetime, timedelta, timezone

# ========================== üì¶ –ê–í–¢–û–£–°–¢–ê–ù–û–í–ö–ê –ë–ò–ë–õ–ò–û–¢–ï–ö ==========================
required_libs = [
    "aiogram==3.3.0",
    "python-dateutil"
]

for lib in required_libs:
    try:
        __import__(lib.split("==")[0])
    except ImportError:
        print(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞–∫–µ—Ç: {lib} ...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", lib])

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# ========================== ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò ==========================
BOT_TOKEN = "8375240057:AAHmI5rg7YpYjbZGCxEzEBHVngzs6SgQZvA"
if not BOT_TOKEN or BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–°–Æ–î–ê":
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

TZ = timezone(timedelta(hours=3))
LOVE_START_DATE = datetime(2024, 6, 1, tzinfo=TZ)

# ========================== üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========================
def db_conn():
    conn = sqlite3.connect("lovebot.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            popa_count INTEGER DEFAULT 0
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT,
            remind_at TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS notes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT,
            photo_id TEXT
        )
    """)
    conn.commit()
    return conn

# ========================== üì± –°–û–°–¢–û–Ø–ù–ò–Ø ==========================
class AddReminder(StatesGroup):
    waiting_text = State()
    waiting_time = State()

class AddNote(StatesGroup):
    waiting_text = State()
    waiting_photo = State()

class RandomRange(StatesGroup):
    waiting_min = State()
    waiting_max = State()

# ========================== üß† –ö–ù–û–ü–ö–ò ==========================
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üíã –ü–æ –ø–æ–ø–µ")],
            [KeyboardButton("üïê –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton("üìí –ó–∞–º–µ—Ç–∫–∏")],
            [KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )

# ========================== ‚ù§Ô∏è –°–¢–ê–†–¢ ==========================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    conn = db_conn()
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO stats (user_id, name) VALUES (?, ?)", (message.from_user.id, message.from_user.full_name))
    conn.commit()
    conn.close()

    days_in_love = (datetime.now(TZ) - LOVE_START_DATE).days
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üíû\n"
        f"–í—ã —É–∂–µ –≤–º–µ—Å—Ç–µ ‚ù§Ô∏è {days_in_love} –¥–Ω–µ–π!",
        reply_markup=main_keyboard()
    )

# ========================== üíã –ü–û –ü–û–ü–ï ==========================
@dp.message(F.text == "üíã –ü–æ –ø–æ–ø–µ")
async def popa_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë© –õ—é–±–∏–º–æ–π", callback_data=f"popa_add_{message.from_user.id}_partner"),
                InlineKeyboardButton(text="üë® –õ—é–±–∏–º–æ–º—É", callback_data=f"popa_add_{message.from_user.id}_me")
            ]
        ]
    )
    await message.answer("–ö–æ–º—É –¥–æ–±–∞–≤–∏—Ç—å ‚Äò–ø–æ –ø–æ–ø–µ‚Äô? üòà", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("popa_add_"))
async def popa_add(query: types.CallbackQuery):
    parts = query.data.split("_")
    sender_id = int(parts[2])
    target = parts[3]

    conn = db_conn()
    cur = conn.cursor()

    if target == "me":
        cur.execute("UPDATE stats SET popa_count = popa_count + 1 WHERE user_id = ?", (sender_id,))
        target_name = "—Ç–µ–±–µ üòè"
    else:
        cur.execute("UPDATE stats SET popa_count = popa_count + 1 WHERE user_id != ?", (sender_id,))
        target_name = "—Ç–≤–æ–µ–π –ª—é–±–≤–∏ üíû"

    conn.commit()
    conn.close()
    await query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {target_name} –ø–æ –ø–æ–ø–µ üòà", show_alert=True)

# ========================== üïê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ==========================
@dp.message(F.text == "üïê –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="reminder_add")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminder_list")]
        ]
    )
    await message.answer("–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üïê", reply_markup=keyboard)

@dp.callback_query(F.data == "reminder_add")
async def add_reminder_start(query: types.CallbackQuery, state):
    await query.message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìù")
    await state.set_state(AddReminder.waiting_text)

@dp.message(StateFilter(AddReminder.waiting_text))
async def add_reminder_text(message: types.Message, state):
    await state.update_data(text=message.text)
    await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ‚è∞")
    await state.set_state(AddReminder.waiting_time)

@dp.message(StateFilter(AddReminder.waiting_time))
async def add_reminder_time(message: types.Message, state):
    try:
        minutes = int(message.text)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 10")

    data = await state.get_data()
    remind_time = datetime.now(TZ) + timedelta(minutes=minutes)

    conn = db_conn()
    cur = conn.cursor()
    cur.execute("INSERT INTO reminders (user_id, text, remind_at) VALUES (?, ?, ?)",
                (message.from_user.id, data["text"], remind_time.isoformat()))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üïê –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")

@dp.callback_query(F.data == "reminder_list")
async def reminder_list(query: types.CallbackQuery):
    conn = db_conn()
    cur = conn.cursor()
    cur.execute("SELECT id, text, remind_at FROM reminders WHERE user_id = ?", (query.from_user.id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await query.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üí´")
    else:
        text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for r in rows:
            remind_time = datetime.fromisoformat(r[2])
            text += f"üïê {r[1]} ‚Äî {remind_time.strftime('%H:%M %d.%m')}  /del_{r[0]}\n"
        await query.message.answer(text)

@dp.message(F.text.startswith("/del_"))
async def del_reminder(message: types.Message):
    reminder_id = message.text.replace("/del_", "")
    conn = db_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM reminders WHERE id = ? AND user_id = ?", (reminder_id, message.from_user.id))
    conn.commit()
    conn.close()
    await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

# ========================== üìí –ó–ê–ú–ï–¢–ö–ò ==========================
@dp.message(F.text == "üìí –ó–∞–º–µ—Ç–∫–∏")
async def notes_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="note_add")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="note_list")]
        ]
    )
    await message.answer("–ú–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫ üìí", reply_markup=keyboard)

@dp.callback_query(F.data == "note_add")
async def add_note_start(query: types.CallbackQuery, state):
    await query.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ üìù")
    await state.set_state(AddNote.waiting_text)

@dp.message(StateFilter(AddNote.waiting_text))
async def add_note_text(message: types.Message, state):
    await state.update_data(text=message.text)
    await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–º–µ—Ç–∫–µ? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(AddNote.waiting_photo)

@dp.message(StateFilter(AddNote.waiting_photo))
async def add_note_photo(message: types.Message, state):
    data = await state.get_data()
    photo_id = None
    if message.photo:
        photo_id = message.photo[-1].file_id

    conn = db_conn()
    cur = conn.cursor()
    cur.execute("INSERT INTO notes (user_id, text, photo_id) VALUES (?, ?, ?)",
                (message.from_user.id, data["text"], photo_id))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.callback_query(F.data == "note_list")
async def note_list(query: types.CallbackQuery):
    conn = db_conn()
    cur = conn.cursor()
    cur.execute("SELECT id, text, photo_id FROM notes WHERE user_id = ?", (query.from_user.id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await query.message.answer("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ üì≠")
    else:
        for n in rows:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"note_del_{n[0]}")]
            ])
            if n[2]:
                await bot.send_photo(query.from_user.id, n[2], caption=n[1], reply_markup=kb)
            else:
                await bot.send_message(query.from_user.id, n[1], reply_markup=kb)

@dp.callback_query(F.data.startswith("note_del_"))
async def note_delete(query: types.CallbackQuery):
    note_id = query.data.replace("note_del_", "")
    conn = db_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM notes WHERE id = ? AND user_id = ?", (note_id, query.from_user.id))
    conn.commit()
    conn.close()
    await query.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)

# ========================== üé≤ –†–ê–ù–î–û–ú ==========================
@dp.message(F.text == "üé≤ –†–∞–Ω–¥–æ–º")
async def random_start(message: types.Message, state):
    await message.answer("–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ üéØ")
    await state.set_state(RandomRange.waiting_min)

@dp.message(StateFilter(RandomRange.waiting_min))
async def random_min(message: types.Message, state):
    try:
        val = int(message.text)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
    await state.update_data(min=val)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ üéØ")
    await state.set_state(RandomRange.waiting_max)

@dp.message(StateFilter(RandomRange.waiting_max))
async def random_max(message: types.Message, state):
    try:
        val = int(message.text)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ")

    data = await state.get_data()
    res = random.randint(data["min"], val)
    await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {res}")
    await state.clear()

# ========================== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========================
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: types.Message):
    conn = db_conn()
    cur = conn.cursor()
    cur.execute("SELECT name, popa_count FROM stats WHERE user_id = ?", (message.from_user.id,))
    user = cur.fetchone()
    conn.close()

    days = (datetime.now(TZ) - LOVE_START_DATE).days
    popa_count = user[1] if user else 0
    await message.answer(f"‚ù§Ô∏è {user[0]}\nüíã –ü–æ –ø–æ–ø–µ: {popa_count}\nüìÖ –í–º–µ—Å—Ç–µ: {days} –¥–Ω–µ–π")

# ========================== üïê –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========================
async def reminder_loop():
    while True:
        now = datetime.now(TZ)
        conn = db_conn()
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, text FROM reminders WHERE remind_at <= ?", (now.isoformat(),))
        rows = cur.fetchall()
        for r in rows:
            await bot.send_message(r[1], f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r[2]}")
            cur.execute("DELETE FROM reminders WHERE id = ?", (r[0],))
        conn.commit()
        conn.close()
        await asyncio.sleep(60)

# ========================== üöÄ –ó–ê–ü–£–°–ö ==========================
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
